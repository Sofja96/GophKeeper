// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/keeper_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	proto "github.com/Sofja96/GophKeeper.git/proto"
)

// MockGophKeeperClient is a mock of GophKeeperClient interface.
type MockGophKeeperClient struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperClientMockRecorder
}

// MockGophKeeperClientMockRecorder is the mock recorder for MockGophKeeperClient.
type MockGophKeeperClientMockRecorder struct {
	mock *MockGophKeeperClient
}

// NewMockGophKeeperClient creates a new mock instance.
func NewMockGophKeeperClient(ctrl *gomock.Controller) *MockGophKeeperClient {
	mock := &MockGophKeeperClient{ctrl: ctrl}
	mock.recorder = &MockGophKeeperClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperClient) EXPECT() *MockGophKeeperClientMockRecorder {
	return m.recorder
}

// CreateData mocks base method.
func (m *MockGophKeeperClient) CreateData(ctx context.Context, in *proto.CreateDataRequest, opts ...grpc.CallOption) (*proto.CreateDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateData", varargs...)
	ret0, _ := ret[0].(*proto.CreateDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateData indicates an expected call of CreateData.
func (mr *MockGophKeeperClientMockRecorder) CreateData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockGophKeeperClient)(nil).CreateData), varargs...)
}

// DeleteData mocks base method.
func (m *MockGophKeeperClient) DeleteData(ctx context.Context, in *proto.DeleteDataRequest, opts ...grpc.CallOption) (*proto.DeleteDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteData", varargs...)
	ret0, _ := ret[0].(*proto.DeleteDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockGophKeeperClientMockRecorder) DeleteData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockGophKeeperClient)(nil).DeleteData), varargs...)
}

// GetAllData mocks base method.
func (m *MockGophKeeperClient) GetAllData(ctx context.Context, in *proto.GetAllDataRequest, opts ...grpc.CallOption) (*proto.GetAllDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllData", varargs...)
	ret0, _ := ret[0].(*proto.GetAllDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllData indicates an expected call of GetAllData.
func (mr *MockGophKeeperClientMockRecorder) GetAllData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllData", reflect.TypeOf((*MockGophKeeperClient)(nil).GetAllData), varargs...)
}

// Login mocks base method.
func (m *MockGophKeeperClient) Login(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGophKeeperClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGophKeeperClient)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockGophKeeperClient) Register(ctx context.Context, in *proto.RegisterRequest, opts ...grpc.CallOption) (*proto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*proto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockGophKeeperClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGophKeeperClient)(nil).Register), varargs...)
}

// UpdateData mocks base method.
func (m *MockGophKeeperClient) UpdateData(ctx context.Context, in *proto.UpdateDataRequest, opts ...grpc.CallOption) (*proto.UpdateDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateData", varargs...)
	ret0, _ := ret[0].(*proto.UpdateDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockGophKeeperClientMockRecorder) UpdateData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockGophKeeperClient)(nil).UpdateData), varargs...)
}

// MockGophKeeperServer is a mock of GophKeeperServer interface.
type MockGophKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperServerMockRecorder
}

// MockGophKeeperServerMockRecorder is the mock recorder for MockGophKeeperServer.
type MockGophKeeperServerMockRecorder struct {
	mock *MockGophKeeperServer
}

// NewMockGophKeeperServer creates a new mock instance.
func NewMockGophKeeperServer(ctrl *gomock.Controller) *MockGophKeeperServer {
	mock := &MockGophKeeperServer{ctrl: ctrl}
	mock.recorder = &MockGophKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperServer) EXPECT() *MockGophKeeperServerMockRecorder {
	return m.recorder
}

// CreateData mocks base method.
func (m *MockGophKeeperServer) CreateData(arg0 context.Context, arg1 *proto.CreateDataRequest) (*proto.CreateDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateData", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateData indicates an expected call of CreateData.
func (mr *MockGophKeeperServerMockRecorder) CreateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockGophKeeperServer)(nil).CreateData), arg0, arg1)
}

// DeleteData mocks base method.
func (m *MockGophKeeperServer) DeleteData(arg0 context.Context, arg1 *proto.DeleteDataRequest) (*proto.DeleteDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockGophKeeperServerMockRecorder) DeleteData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockGophKeeperServer)(nil).DeleteData), arg0, arg1)
}

// GetAllData mocks base method.
func (m *MockGophKeeperServer) GetAllData(arg0 context.Context, arg1 *proto.GetAllDataRequest) (*proto.GetAllDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllData", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetAllDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllData indicates an expected call of GetAllData.
func (mr *MockGophKeeperServerMockRecorder) GetAllData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllData", reflect.TypeOf((*MockGophKeeperServer)(nil).GetAllData), arg0, arg1)
}

// Login mocks base method.
func (m *MockGophKeeperServer) Login(arg0 context.Context, arg1 *proto.LoginRequest) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGophKeeperServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGophKeeperServer)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockGophKeeperServer) Register(arg0 context.Context, arg1 *proto.RegisterRequest) (*proto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*proto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockGophKeeperServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGophKeeperServer)(nil).Register), arg0, arg1)
}

// UpdateData mocks base method.
func (m *MockGophKeeperServer) UpdateData(arg0 context.Context, arg1 *proto.UpdateDataRequest) (*proto.UpdateDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockGophKeeperServerMockRecorder) UpdateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockGophKeeperServer)(nil).UpdateData), arg0, arg1)
}

// mustEmbedUnimplementedGophKeeperServer mocks base method.
func (m *MockGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGophKeeperServer")
}

// mustEmbedUnimplementedGophKeeperServer indicates an expected call of mustEmbedUnimplementedGophKeeperServer.
func (mr *MockGophKeeperServerMockRecorder) mustEmbedUnimplementedGophKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGophKeeperServer", reflect.TypeOf((*MockGophKeeperServer)(nil).mustEmbedUnimplementedGophKeeperServer))
}

// MockUnsafeGophKeeperServer is a mock of UnsafeGophKeeperServer interface.
type MockUnsafeGophKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGophKeeperServerMockRecorder
}

// MockUnsafeGophKeeperServerMockRecorder is the mock recorder for MockUnsafeGophKeeperServer.
type MockUnsafeGophKeeperServerMockRecorder struct {
	mock *MockUnsafeGophKeeperServer
}

// NewMockUnsafeGophKeeperServer creates a new mock instance.
func NewMockUnsafeGophKeeperServer(ctrl *gomock.Controller) *MockUnsafeGophKeeperServer {
	mock := &MockUnsafeGophKeeperServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGophKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGophKeeperServer) EXPECT() *MockUnsafeGophKeeperServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGophKeeperServer mocks base method.
func (m *MockUnsafeGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGophKeeperServer")
}

// mustEmbedUnimplementedGophKeeperServer indicates an expected call of mustEmbedUnimplementedGophKeeperServer.
func (mr *MockUnsafeGophKeeperServerMockRecorder) mustEmbedUnimplementedGophKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGophKeeperServer", reflect.TypeOf((*MockUnsafeGophKeeperServer)(nil).mustEmbedUnimplementedGophKeeperServer))
}

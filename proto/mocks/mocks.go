// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/keeper_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	proto "github.com/Sofja96/GophKeeper.git/proto"
)

// MockGophKeeperClient is a mock of GophKeeperClient interface.
type MockGophKeeperClient struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperClientMockRecorder
}

// MockGophKeeperClientMockRecorder is the mock recorder for MockGophKeeperClient.
type MockGophKeeperClientMockRecorder struct {
	mock *MockGophKeeperClient
}

// NewMockGophKeeperClient creates a new mock instance.
func NewMockGophKeeperClient(ctrl *gomock.Controller) *MockGophKeeperClient {
	mock := &MockGophKeeperClient{ctrl: ctrl}
	mock.recorder = &MockGophKeeperClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperClient) EXPECT() *MockGophKeeperClientMockRecorder {
	return m.recorder
}

// GetUserData mocks base method.
func (m *MockGophKeeperClient) GetUserData(ctx context.Context, in *proto.GetUserDataRequest, opts ...grpc.CallOption) (*proto.GetUserDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserData", varargs...)
	ret0, _ := ret[0].(*proto.GetUserDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockGophKeeperClientMockRecorder) GetUserData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockGophKeeperClient)(nil).GetUserData), varargs...)
}

// Login mocks base method.
func (m *MockGophKeeperClient) Login(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGophKeeperClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGophKeeperClient)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockGophKeeperClient) Register(ctx context.Context, in *proto.RegisterRequest, opts ...grpc.CallOption) (*proto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*proto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockGophKeeperClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGophKeeperClient)(nil).Register), varargs...)
}

// MockGophKeeperServer is a mock of GophKeeperServer interface.
type MockGophKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperServerMockRecorder
}

// MockGophKeeperServerMockRecorder is the mock recorder for MockGophKeeperServer.
type MockGophKeeperServerMockRecorder struct {
	mock *MockGophKeeperServer
}

// NewMockGophKeeperServer creates a new mock instance.
func NewMockGophKeeperServer(ctrl *gomock.Controller) *MockGophKeeperServer {
	mock := &MockGophKeeperServer{ctrl: ctrl}
	mock.recorder = &MockGophKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperServer) EXPECT() *MockGophKeeperServerMockRecorder {
	return m.recorder
}

// GetUserData mocks base method.
func (m *MockGophKeeperServer) GetUserData(arg0 context.Context, arg1 *proto.GetUserDataRequest) (*proto.GetUserDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUserDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockGophKeeperServerMockRecorder) GetUserData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockGophKeeperServer)(nil).GetUserData), arg0, arg1)
}

// Login mocks base method.
func (m *MockGophKeeperServer) Login(arg0 context.Context, arg1 *proto.LoginRequest) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGophKeeperServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGophKeeperServer)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockGophKeeperServer) Register(arg0 context.Context, arg1 *proto.RegisterRequest) (*proto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*proto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockGophKeeperServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGophKeeperServer)(nil).Register), arg0, arg1)
}

// mustEmbedUnimplementedGophKeeperServer mocks base method.
func (m *MockGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGophKeeperServer")
}

// mustEmbedUnimplementedGophKeeperServer indicates an expected call of mustEmbedUnimplementedGophKeeperServer.
func (mr *MockGophKeeperServerMockRecorder) mustEmbedUnimplementedGophKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGophKeeperServer", reflect.TypeOf((*MockGophKeeperServer)(nil).mustEmbedUnimplementedGophKeeperServer))
}

// MockUnsafeGophKeeperServer is a mock of UnsafeGophKeeperServer interface.
type MockUnsafeGophKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGophKeeperServerMockRecorder
}

// MockUnsafeGophKeeperServerMockRecorder is the mock recorder for MockUnsafeGophKeeperServer.
type MockUnsafeGophKeeperServerMockRecorder struct {
	mock *MockUnsafeGophKeeperServer
}

// NewMockUnsafeGophKeeperServer creates a new mock instance.
func NewMockUnsafeGophKeeperServer(ctrl *gomock.Controller) *MockUnsafeGophKeeperServer {
	mock := &MockUnsafeGophKeeperServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGophKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGophKeeperServer) EXPECT() *MockUnsafeGophKeeperServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGophKeeperServer mocks base method.
func (m *MockUnsafeGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGophKeeperServer")
}

// mustEmbedUnimplementedGophKeeperServer indicates an expected call of mustEmbedUnimplementedGophKeeperServer.
func (mr *MockUnsafeGophKeeperServerMockRecorder) mustEmbedUnimplementedGophKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGophKeeperServer", reflect.TypeOf((*MockUnsafeGophKeeperServer)(nil).mustEmbedUnimplementedGophKeeperServer))
}
